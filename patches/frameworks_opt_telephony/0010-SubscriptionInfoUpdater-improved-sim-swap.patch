From 867bb9782160860df823322d365fe5ebcea5fca9 Mon Sep 17 00:00:00 2001
From: Roman Birg <roman@cyngn.com>
Date: Tue, 17 May 2016 17:14:44 -0700
Subject: [PATCH 10/13] SubscriptionInfoUpdater: improved sim swap

We now keep track of the last number of inserted SIMs updated for. So
when the number of SIMs has changed we do the following:

 1 sim: Clear stale defaults
        Disable SMS prompt, SMS app will default to current sim
        Disable data if the SIM left in the tray is not the one chosen

 m sim: Enable SMS prompt if we don't have a valid default (aka always
        ask)

Furthermore, when we detect the device is an MSIM device and there is
only one active sub, return the active sub to the UI layers (so SIM
selection screen displays proper, grayed out, current settings).

Ticket: CYNGNOS-2185, CYNGNOS-2570

Change-Id: Ib1b4f4d87640e4b20722295304c58dff7dbeecbb
Signed-off-by: Roman Birg <roman@cyngn.com>
---
 .../internal/telephony/SubscriptionController.java | 26 ++++++++-
 .../telephony/SubscriptionInfoUpdater.java         | 68 +++++++++++++++++++---
 .../internal/telephony/UiccSmsController.java      | 17 ++++--
 3 files changed, 96 insertions(+), 15 deletions(-)

diff --git a/src/java/com/android/internal/telephony/SubscriptionController.java b/src/java/com/android/internal/telephony/SubscriptionController.java
index c7c3f80..dc66485 100644
--- a/src/java/com/android/internal/telephony/SubscriptionController.java
+++ b/src/java/com/android/internal/telephony/SubscriptionController.java
@@ -190,6 +190,12 @@ public class SubscriptionController extends ISub.Stub {
         return subUpdater != null && sSlotIdxToSubId.size() == subUpdater.getInsertedSimCount();
     }
 
+    private boolean isSingleSimActiveOnMSIM() {
+        final SubscriptionInfoUpdater subUpdater = PhoneFactory.getSubscriptionInfoUpdater();
+        return subUpdater != null && subUpdater.getInsertedSimCount() == 1
+                && getActiveSubInfoCountMax() > 1;
+    }
+
     private SubscriptionController(Phone phone) {
         mContext = phone.getContext();
         mCM = CallManager.getInstance();
@@ -1408,6 +1414,10 @@ public class SubscriptionController extends ISub.Stub {
 
     @Override
     public int getDefaultSmsSubId() {
+        if (isSingleSimActiveOnMSIM()) {
+            if (VDBG) logd("[getDefaultSmsSubId] overridden to current single active sim");
+            return mDefaultFallbackSubId;
+        }
         int subId = Settings.Global.getInt(mContext.getContentResolver(),
                 Settings.Global.MULTI_SIM_SMS_SUBSCRIPTION,
                 SubscriptionManager.INVALID_SUBSCRIPTION_ID);
@@ -1439,6 +1449,10 @@ public class SubscriptionController extends ISub.Stub {
 
     @Override
     public int getDefaultVoiceSubId() {
+        if (isSingleSimActiveOnMSIM()) {
+            if (VDBG) logd("[getDefaultVoiceSubId] overridden to current single active sim");
+            return mDefaultFallbackSubId;
+        }
         int subId = Settings.Global.getInt(mContext.getContentResolver(),
                 Settings.Global.MULTI_SIM_VOICE_CALL_SUBSCRIPTION,
                 SubscriptionManager.INVALID_SUBSCRIPTION_ID);
@@ -1448,6 +1462,10 @@ public class SubscriptionController extends ISub.Stub {
 
     @Override
     public int getDefaultDataSubId() {
+        if (isSingleSimActiveOnMSIM()) {
+            if (VDBG) logd("[getDefaultDataSubId] overridden to current single active sim");
+            return mDefaultFallbackSubId;
+        }
         int subId = Settings.Global.getInt(mContext.getContentResolver(),
                 Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION,
                 SubscriptionManager.INVALID_SUBSCRIPTION_ID);
@@ -1500,8 +1518,10 @@ public class SubscriptionController extends ISub.Stub {
         // FIXME is this still needed?
         updateAllDataConnectionTrackers();
 
-        Settings.Global.putInt(mContext.getContentResolver(),
-                Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION, subId);
+        if (!isSingleSimActiveOnMSIM()) {
+            Settings.Global.putInt(mContext.getContentResolver(),
+                    Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION, subId);
+        }
         broadcastDefaultDataSubIdChanged(subId);
     }
 
@@ -1536,7 +1556,7 @@ public class SubscriptionController extends ISub.Stub {
         if (SubscriptionManager.isValidSubscriptionId(subId)) {
             int phoneId = getPhoneId(subId);
             if (phoneId >= 0 && (phoneId < mTelephonyManager.getPhoneCount()
-                    || mTelephonyManager.getSimCount() == 1)) {
+                    || isSingleSimActiveOnMSIM())) {
                 if (DBG) logdl("[setDefaultFallbackSubId] set mDefaultFallbackSubId=" + subId);
                 mDefaultFallbackSubId = subId;
                 // Update MCC MNC device configuration information
diff --git a/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java b/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java
index 10f8328..ead340e 100644
--- a/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java
+++ b/src/java/com/android/internal/telephony/SubscriptionInfoUpdater.java
@@ -52,6 +52,7 @@ import com.android.internal.telephony.uicc.IccUtils;
 
 import java.io.FileDescriptor;
 import java.io.PrintWriter;
+import java.util.BitSet;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -105,6 +106,8 @@ public class SubscriptionInfoUpdater extends Handler {
 
     // Key used to read/write the current IMSI. Updated on SIM_STATE_CHANGED - LOADED.
     public static final String CURR_SUBID = "curr_subid";
+    // Key used to determine if the number of sims in the device has changed
+    private static final String PREF_LAST_SEEN_SIM_COUNT = "previous_update_sim_count";
 
     private static Phone[] mPhone;
     private static Context mContext = null;
@@ -120,6 +123,7 @@ public class SubscriptionInfoUpdater extends Handler {
     private CarrierServiceBindHelper mCarrierServiceBindHelper;
     private boolean mIsShutdown;
     private int mCurrentSimCount = 0;
+    private BitSet mLockedSims = new BitSet(PROJECT_SIM_NUM);
 
     public SubscriptionInfoUpdater(Context context, Phone[] phone, CommandsInterface[] ci) {
         logd("Constructor invoked");
@@ -248,6 +252,16 @@ public class SubscriptionInfoUpdater extends Handler {
                     logd("Ignoring simStatus: " + simStatus);
                 }
             }
+
+            if (IccCardConstants.INTENT_VALUE_ICC_LOCKED.equals(simStatus)) {
+                mLockedSims.set(slotId);
+                update(slotId);
+            } else if (IccCardConstants.INTENT_VALUE_ICC_READY.equals(simStatus)
+                    || IccCardConstants.INTENT_VALUE_ICC_LOADED.equals(simStatus)) {
+                mLockedSims.clear(slotId);
+                update(slotId);
+            }
+
             logd("[Receiver]-");
         }
     };
@@ -351,6 +365,7 @@ public class SubscriptionInfoUpdater extends Handler {
                 break;
 
             case EVENT_UPDATE_INSERTED_SIM_COUNT:
+                logd("EVENT_UPDATE_INSERTED_SIM_COUNT: locked sims: " + mLockedSims.cardinality());
                 if (isAllIccIdQueryDone() && !hasMessages(EVENT_UPDATE_INSERTED_SIM_COUNT)) {
                     updateSubscriptionInfoByIccId();
                     logd("update inserted sim count, current sim count: " + mCurrentSimCount);
@@ -479,7 +494,7 @@ public class SubscriptionInfoUpdater extends Handler {
                     PreferenceManager.getDefaultSharedPreferences(mContext);
             int storedSubId = sp.getInt(CURR_SUBID + slotId, -1);
 
-            if (storedSubId != subId && storedSubId != -1) {
+            if (storedSubId != subId) {
                 int networkType = RILConstants.PREFERRED_NETWORK_MODE;
 
                 // when known SIM inserted in another slot for which subId already
@@ -694,18 +709,57 @@ public class SubscriptionInfoUpdater extends Handler {
             }
         }
 
-        if (!mIsShutdown && insertedSimCount > 1 && update) {
+        if (update && !mIsShutdown && mLockedSims.cardinality() == 0) {
+            final int previousUpdateSimCount = previousUpdateSimCount();
+            if (previousUpdateSimCount != insertedSimCount) {
+                logd("number of sims changed, resetting sms prompt, old sim count: "
+                        + previousUpdateSimCount);
+                if (insertedSimCount == 1 && PROJECT_SIM_NUM > 1) {
+                    // 1 sim, msim device: clear stale defaults (doesn't clear inactive subs)
+                    mSubscriptionManager.clearDefaultsForInactiveSubIds();
+
+                    // then disable sms prompt (sms app will default to inserted sim)
+                    PhoneFactory.setSMSPromptEnabled(false); // can't prompt for 1 sim
+
+                    // finally, disable data if this single sim isn't our our selected data sim previously
+                    int realStoredDataSub = Settings.Global.getInt(mContext.getContentResolver(),
+                            Settings.Global.MULTI_SIM_DATA_CALL_SUBSCRIPTION,
+                            SubscriptionManager.INVALID_SUBSCRIPTION_ID);
+
+                    if (realStoredDataSub != SubscriptionManager.getDefaultDataSubscriptionId()) {
+                        PhoneFactory.getDefaultPhone().setDataEnabled(false);
+                    }
+                } else if (insertedSimCount > 1) {
+                    // we now have multiple sims, maybe enable the SMS prompt if no valid
+                    // sub is ready to handle SMS
+                    PhoneFactory.setSMSPromptEnabled(!SubscriptionManager.isValidSubscriptionId(
+                            SubscriptionManager.getDefaultSmsSubscriptionId()));
+                }
+                setPreviousUpdateSimCount(insertedSimCount);
+            }
             // Ensure the modems are mapped correctly
-            mSubscriptionManager.setDefaultDataSubId(
-                    mSubscriptionManager.getDefaultDataSubscriptionId());
-        }
-
-        if (update) {
+            // will not override MSIM settings with 1 sim in the device.
+            mSubscriptionManager.setDefaultDataSubId(SubscriptionManager.getDefaultDataSubscriptionId());
+            SubscriptionController.getInstance().notifySubscriptionInfoChanged();
+        } else if (update && !mIsShutdown) {
+            // we have locked sims, need to update so we can unlock them
             SubscriptionController.getInstance().notifySubscriptionInfoChanged();
         }
         logd("updateSubscriptionInfoByIccId:- SsubscriptionInfo update complete");
     }
 
+    private int previousUpdateSimCount() {
+        return PreferenceManager.getDefaultSharedPreferences(mContext)
+                .getInt(PREF_LAST_SEEN_SIM_COUNT, 0);
+    }
+
+    private void setPreviousUpdateSimCount(int simCount) {
+        PreferenceManager.getDefaultSharedPreferences(mContext)
+                .edit()
+                .putInt(PREF_LAST_SEEN_SIM_COUNT, simCount)
+                .apply();
+    }
+
     protected int getInsertedSimCount() {
         if (!isAllIccIdQueryDone()) {
             return 0;
diff --git a/src/java/com/android/internal/telephony/UiccSmsController.java b/src/java/com/android/internal/telephony/UiccSmsController.java
index 08ff4b3..caca2f2 100755
--- a/src/java/com/android/internal/telephony/UiccSmsController.java
+++ b/src/java/com/android/internal/telephony/UiccSmsController.java
@@ -291,6 +291,12 @@ public class UiccSmsController extends ISms.Stub {
 
     @Override
     public boolean isSmsSimPickActivityNeeded(int subId) {
+        if (!isSMSPromptEnabled()) {
+            Rlog.d(LOG_TAG, "isSmsSimPickActivityNeeded: false, sms prompt disabled.");
+            // user knows best
+            return false;
+        }
+
         final Context context = ActivityThread.currentApplication().getApplicationContext();
         TelephonyManager telephonyManager =
                 (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
@@ -302,11 +308,6 @@ public class UiccSmsController extends ISms.Stub {
             Binder.restoreCallingIdentity(identity);
         }
 
-        if (isSMSPromptEnabled()) {
-            // we will make the user pick
-            return false;
-        }
-
         if (subInfoList != null) {
             final int subInfoLength = subInfoList.size();
 
@@ -320,6 +321,12 @@ public class UiccSmsController extends ISms.Stub {
 
             // If reached here and multiple SIMs and subs present, sms sim pick activity is needed
             if (subInfoLength > 0 && telephonyManager.getSimCount() > 1) {
+                final SubscriptionInfoUpdater subscriptionInfoUpdater
+                        = PhoneFactory.getSubscriptionInfoUpdater();
+                if (subscriptionInfoUpdater != null) {
+                    // use the *real* inserted sim count if we can
+                    return subscriptionInfoUpdater.getInsertedSimCount() > 1;
+                }
                 return true;
             }
         }
-- 
2.7.4

