From 43fc8d9aa241ad8e89eaafb0c945c65112e1a9b9 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A5rten=20Kongstad?= <marten.kongstad@sonymobile.com>
Date: Tue, 30 Aug 2016 01:19:19 -0400
Subject: [PATCH 13/31] OMS-N: adb shell command to access
 OverlayManagerService [13/14]

Re-add the command to communicate with the OverlayManagerService for
debugging purposes. This mirrors the am and pm commands.

Example use:
    $ adb shell om list
    com.android.systemui
        [ ] com.test.awesome-home-button

    $ adb shell om enable com.test.awesome-home-button

    $ adb shell om list
    com.android.systemui
        [x] com.test.awesome-home-button

Change-Id: Ia5c2a837ae764f4f91146c2976ad72fd339b6ca6
---
 cmds/om/Android.mk                          |  13 ++
 cmds/om/om                                  |   8 +
 cmds/om/src/com/android/commands/om/Om.java | 331 ++++++++++++++++++++++++++++
 3 files changed, 352 insertions(+)
 create mode 100644 cmds/om/Android.mk
 create mode 100755 cmds/om/om
 create mode 100644 cmds/om/src/com/android/commands/om/Om.java

diff --git a/cmds/om/Android.mk b/cmds/om/Android.mk
new file mode 100644
index 0000000..45b60e9
--- /dev/null
+++ b/cmds/om/Android.mk
@@ -0,0 +1,13 @@
+LOCAL_PATH:= $(call my-dir)
+
+include $(CLEAR_VARS)
+LOCAL_SRC_FILES := $(call all-subdir-java-files)
+LOCAL_MODULE := om
+include $(BUILD_JAVA_LIBRARY)
+
+include $(CLEAR_VARS)
+LOCAL_MODULE := om
+LOCAL_SRC_FILES := om
+LOCAL_MODULE_CLASS := EXECUTABLES
+LOCAL_MODULE_TAGS := optional
+include $(BUILD_PREBUILT)
diff --git a/cmds/om/om b/cmds/om/om
new file mode 100755
index 0000000..e9567e9
--- /dev/null
+++ b/cmds/om/om
@@ -0,0 +1,8 @@
+#!/system/bin/sh
+#
+# Script to start "om" on the device, which has a very rudimentary
+# shell.
+#
+base=/system
+export CLASSPATH=$base/framework/om.jar
+exec app_process $base/bin com.android.commands.om.Om "$@"
diff --git a/cmds/om/src/com/android/commands/om/Om.java b/cmds/om/src/com/android/commands/om/Om.java
new file mode 100644
index 0000000..a1104ee
--- /dev/null
+++ b/cmds/om/src/com/android/commands/om/Om.java
@@ -0,0 +1,331 @@
+package com.android.commands.om;
+
+import android.content.om.IOverlayManager;
+import android.content.om.OverlayInfo;
+import android.content.pm.IPackageManager;
+import android.content.pm.PackageInfo;
+import android.os.RemoteException;
+import android.os.ServiceManager;
+import android.os.UserHandle;
+import android.util.ArrayMap;
+import android.util.Log;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map.Entry;
+import java.util.Map;
+
+public final class Om {
+    private static final String TAG = "om";
+
+    private IOverlayManager mOm;
+
+    private String[] mArgs;
+    private int mNextArg;
+    private String mCurArgData;
+
+    private static final String OM_NOT_RUNNING_ERR =
+            "Error: Could not access the Overlay Manager.  Is the system running?";
+
+    public static void main(String[] args) {
+        int exitCode = 1;
+        try {
+            exitCode = new Om().run(args);
+        } catch (Exception e) {
+            Log.e(TAG, "Error", e);
+            System.err.println("Error: " + e);
+            if (e instanceof RemoteException) {
+                System.err.println(OM_NOT_RUNNING_ERR);
+            }
+        }
+        System.exit(exitCode);
+    }
+
+    public int run(String[] args) throws IOException, RemoteException {
+        if (args.length < 1) {
+            return showUsage();
+        }
+
+        mOm = IOverlayManager.Stub.asInterface(ServiceManager.getService("overlay"));
+        if (mOm == null) {
+            System.err.println(OM_NOT_RUNNING_ERR);
+            return 1;
+        }
+
+        mArgs = args;
+        String op = args[0];
+        mNextArg = 1;
+
+        if ("list".equals(op)) {
+            return runList();
+        } else if ("enable".equals(op)) {
+            return runEnableDisable(true);
+        } else if ("disable".equals(op)) {
+            return runEnableDisable(false);
+        } else if ("set-priority".equals(op)) {
+            return runSetPriority();
+        } else if (op != null) {
+            System.err.println("Error: unknown command '" + op + "'");
+        }
+        return showUsage();
+    }
+
+    /**
+     * List the installed overlay packages
+     */
+    private int runList() {
+        final String TAB = "    ";
+        try {
+            int userId = UserHandle.USER_OWNER;
+            String opt;
+            while ((opt = nextOption()) != null) {
+                switch (opt) {
+                    case "--user":
+                        String optionData = nextOptionData();
+                        if (optionData == null || !isNumber(optionData)) {
+                            System.err.println("Error: no USER_ID specified");
+                            showUsage();
+                            return 1;
+                        }
+                        userId = Integer.parseInt(optionData);
+                        break;
+                    default:
+                        System.err.println("Error: Unknown option: " + opt);
+                        return 1;
+                }
+            }
+
+            ArrayList<String> userSpecifiedPackages = new ArrayList<>(mArgs.length - mNextArg);
+            String arg = nextArg();
+            while (arg != null) {
+                userSpecifiedPackages.add(arg);
+                arg = nextArg();
+            }
+            Map<String, List<OverlayInfo>> targetsAndOverlays = mOm.getAllOverlays(userId);
+
+            if (userSpecifiedPackages.isEmpty()) {
+                for (Entry<String, List<OverlayInfo>> targetEntry : targetsAndOverlays.entrySet()) {
+                    String targetPackageName = targetEntry.getKey();
+                    System.out.println(targetPackageName);
+                    for (OverlayInfo oi : targetEntry.getValue()) {
+                        String status = !oi.isApproved() ? "--- " : (oi.isEnabled() ? "[x] " : "[ ] ");
+                        System.out.println(TAB + status + oi.packageName);
+                    }
+                    System.out.println();
+                }
+            } else {
+                IPackageManager pm =
+                    IPackageManager.Stub.asInterface(ServiceManager.getService("package"));
+                for (String packageName : userSpecifiedPackages) {
+                    OverlayInfo oi = mOm.getOverlayInfo(packageName, userId);
+                    PackageInfo pi = pm.getPackageInfo(packageName, 0, userId);
+
+                    System.out.println(packageName);
+                    if (pi != null && oi != null) {
+                        // overlay package
+                        System.out.println(TAB + "type: overlay package");
+                        System.out.println(String.format(TAB + "version: %d (%s)",
+                                    pi.versionCode, pi.versionName));
+                        System.out.println(TAB + "baseCodePath: " + oi.baseCodePath);
+                        System.out.println(TAB + "targetPackageName: " + oi.targetPackageName);
+                        System.out.println(String.format(TAB + "state: %d (%s)",
+                                    oi.state, OverlayInfo.stateToString(oi.state)));
+                        System.out.println(TAB + "enabled: " + oi.isEnabled());
+                    } else if (pi != null) {
+                        // target package
+                        List<OverlayInfo> overlays = targetsAndOverlays.get(packageName);
+                        System.out.println(TAB + "type: target package");
+                        System.out.println(String.format(TAB + "version: %d (%s)",
+                                    pi.versionCode, pi.versionName));
+                        System.out.println(TAB + "baseCodePath: " +
+                                pi.applicationInfo.getBaseCodePath());
+                        System.out.println(TAB + "overlays: " + toCommaSeparatedString(overlays));
+                    } else {
+                        // unknown package
+                        System.out.println(TAB + "type: unknown package");
+                    }
+                    System.out.println();
+                }
+            }
+            return 0;
+        } catch (RemoteException e) {
+            System.err.println(e.toString());
+            System.err.println(OM_NOT_RUNNING_ERR);
+            return 1;
+        }
+    }
+
+    private String toCommaSeparatedString(List<OverlayInfo> overlays) {
+        if (overlays == null) {
+            return "<none>";
+        }
+        StringBuilder sb = new StringBuilder();
+        for (OverlayInfo info : overlays) {
+            sb.append(info.packageName);
+            sb.append(", ");
+        }
+        return sb.substring(0, sb.length() - 2);
+    }
+
+    private int runEnableDisable(boolean enable) {
+        int userId = UserHandle.USER_OWNER;
+        String opt;
+        while ((opt = nextOption()) != null) {
+            switch (opt) {
+                case "--user":
+                    String optionData = nextOptionData();
+                    if (optionData == null || !isNumber(optionData)) {
+                        System.err.println("Error: no USER_ID specified");
+                        showUsage();
+                        return 1;
+                    } else {
+                        userId = Integer.parseInt(optionData);
+                    }
+                    break;
+                default:
+                    System.err.println("Error: Unknown option: " + opt);
+                    return 1;
+            }
+        }
+        try {
+            String packageName = nextArg();
+            if (packageName == null) {
+                System.err.println("Error: no package specified");
+                return 1;
+            }
+            return mOm.setEnabled(packageName, enable, userId) ? 0 : 1;
+        } catch (RemoteException e) {
+            System.err.println(e.toString());
+            System.err.println(OM_NOT_RUNNING_ERR);
+            return 1;
+        }
+    }
+
+    private int runSetPriority() {
+        int userId = UserHandle.USER_OWNER;
+        String opt;
+        while ((opt = nextOption()) != null) {
+            switch (opt) {
+                case "--user":
+                    String optionData = nextOptionData();
+                    if (optionData == null || !isNumber(optionData)) {
+                        System.err.println("Error: no USER_ID specified");
+                        showUsage();
+                        return 1;
+                    }
+                    userId = Integer.parseInt(optionData);
+                    break;
+                default:
+                    System.err.println("Error: Unknown option: " + opt);
+                    return 1;
+            }
+        }
+        try {
+            String packageName = nextArg();
+            if (packageName == null) {
+                System.err.println("Error: no package specified");
+                return 1;
+            }
+            String moveTo = nextArg();
+            if (moveTo == null) {
+                System.err.println("Error: no parent package specified");
+                return 1;
+            }
+            if ("lowest".equals(moveTo)) {
+                return mOm.setLowestPriority(packageName, userId) ? 0 : 1;
+            } else if ("highest".equals(moveTo)) {
+                return mOm.setHighestPriority(packageName, userId) ? 0 : 1;
+            } else {
+                return mOm.setPriority(packageName, moveTo, userId) ? 0 : 1;
+            }
+        } catch (RemoteException e) {
+            System.err.println(e.toString());
+            System.err.println(OM_NOT_RUNNING_ERR);
+            return 1;
+        }
+    }
+
+
+
+    private String nextOption() {
+        if (mNextArg >= mArgs.length) {
+            return null;
+        }
+        String arg = mArgs[mNextArg];
+        if (!arg.startsWith("-")) {
+            return null;
+        }
+        mNextArg++;
+        if (arg.equals("--")) {
+            return null;
+        }
+        if (arg.length() > 1 && arg.charAt(1) != '-') {
+            if (arg.length() > 2) {
+                mCurArgData = arg.substring(2);
+                return arg.substring(0, 2);
+            } else {
+                mCurArgData = null;
+                return arg;
+            }
+        }
+        mCurArgData = null;
+        return arg;
+    }
+
+    private String nextOptionData() {
+        if (mCurArgData != null) {
+            return mCurArgData;
+        }
+        if (mNextArg >= mArgs.length) {
+            return null;
+        }
+        String data = mArgs[mNextArg];
+        mNextArg++;
+        return data;
+    }
+
+    private String nextArg() {
+        if (mNextArg >= mArgs.length) {
+            return null;
+        }
+        String arg = mArgs[mNextArg];
+        mNextArg++;
+        return arg;
+    }
+
+    private static boolean isNumber(String s) {
+        try {
+            Integer.parseInt(s);
+        } catch (NumberFormatException nfe) {
+            return false;
+        }
+        return true;
+    }
+
+    private static int showUsage() {
+        System.err.println("usage: om list [--user USER_ID] [PACKAGE [PACKAGE [...]]]");
+        System.err.println("       om enable [--user USER_ID] PACKAGE");
+        System.err.println("       om disable [--user USER_ID] PACKAGE");
+        System.err.println("       om set-priority [--user USER_ID] PACKAGE PARENT|lowest|highest");
+        System.err.println("");
+        System.err.println("om list: print all overlay packages in priority order;");
+        System.err.println("         with optional parameters PACKAGEs, limit output to the");
+        System.err.println("         specified packages but include more information");
+        System.err.println("         about each package");
+        System.err.println("");
+        System.err.println("om enable PACKAGE: enable overlay package PACKAGE");
+        System.err.println("");
+        System.err.println("om disable PACKAGE: disable overlay package PACKAGE");
+        System.err.println("");
+        System.err.println("om set-priority PACKAGE PARENT: change the priority of the overlay");
+        System.err.println("         PACKAGE to be just higher than the priority of PACKAGE_PARENT");
+        System.err.println("         If PARENT is the special keyword 'lowest', change priority of");
+        System.err.println("         PACKAGE to the lowest priority. If PARENT is the special");
+        System.err.println("         keyword 'highest', change priority of PACKAGE to the highest");
+        System.err.println("         priority.");
+        System.err.println("");
+        return 1;
+    }
+}
\ No newline at end of file
-- 
2.8.2

