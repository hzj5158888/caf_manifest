From 4f931436c8285800eaf66a4efaccd25dc4e5b0f6 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A5rten=20Kongstad?= <marten.kongstad@sonymobile.com>
Date: Tue, 15 Dec 2015 15:32:48 +0100
Subject: [PATCH 01/33] OMS-N: Support downloaded overlay packages [1/14]

Require non-pre-loaded, ie downloaded, overlay package's signature
match that of the target package.

SECURITY
--------
Overlay packages may either be pre-loaded, ie part of the system image,
or downloaded. Pre-loaded overlays are trusted by definition (as
system/vendor packages). Downloaded overlays are only applied if their
signature matches the signature of their target package.

LOOKUP PRIORITY
---------------
During resource lookup, packages are sequentially queried to provide a
best match, given the constraints of the current configuration. If any
package provides a better match than what has been found so far, it
replaces the previous match. The target package is always queried last.

When loading a package with more than one overlay, the order in which
the overlays are added becomes significant if several packages overlay
the same resource.

For downloaded overlays, the install time is used to determine the load
order: packages installed later will be queried first and can therefore
shadow previously installed overlays. Downloaded overlays always trump
pre-installed ones.

For pre-installed overlays, the install time is randomly determined by
the order in which the Package Manager locates the packages during
initial boot. To support a well-defined order, pre-installed overlay
packages are expected to define an additional 'priority' attribute in
their <overlay> tags:

    <overlay target="com.target.package" priority="1234"/>

Pre-installed overlays are loaded in order of their priority attributes,
sorted in ascending order.

The following example shows the ResTable and PackageGroups after loading
an application and four overlays. The resource lookup framework will
query the packages in the order E, D, C, B, A.

        +------+------+-     -+------+------+
        | 0x01 |      |  ...  |      | 0x7f |
        +------+------+-     -+------+------+
            |                           |
        "android"                Target package A
                                        |
                       Pre-installed overlay B (priority 1)
                                        |
                       Pre-installed overlay C (priority 2)
                                        |
                      Downloaded overlay D (install time T)
                                        |
                    Downloaded overlay E (install time T + 1)

TEST CASES
----------
Test cases are part of CTS. To verify this patch, run

    $ make cts
    $ echo | cts-tradefed run cts --package android.runtimeresourceoverlay

Change-Id: I3d678921f642fe00dd9580bcb5828789c1b1c915
---
 core/java/android/content/pm/PackageParser.java    | 13 ++--
 libs/androidfw/AssetManager.cpp                    | 35 ++++++----
 .../core/java/com/android/server/pm/Installer.java |  7 +-
 .../android/server/pm/PackageManagerService.java   | 74 +++++++++++++++++++++-
 4 files changed, 108 insertions(+), 21 deletions(-)

diff --git a/core/java/android/content/pm/PackageParser.java b/core/java/android/content/pm/PackageParser.java
index c0f868b..5ffe004 100644
--- a/core/java/android/content/pm/PackageParser.java
+++ b/core/java/android/content/pm/PackageParser.java
@@ -1811,12 +1811,17 @@ public class PackageParser {
                     mParseError = PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;
                     return null;
                 }
-                if (pkg.mOverlayPriority < 0 || pkg.mOverlayPriority > 9999) {
-                    outError[0] = "<overlay> priority must be between 0 and 9999";
-                    mParseError =
-                        PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;
+
+                if (pkg.mOverlayPriority != -1 && !trustedOverlay) {
+                    Slog.w(TAG, "overlay package " + pkg.packageName + " installed in " +
+                            "unreliable location, priority will be ignored");
+                    pkg.mOverlayPriority = -1;
+                } else if (pkg.mOverlayPriority == -1 && trustedOverlay) {
+                    outError[0] = "Trusted overlay requires a priority attribute";
+                    mParseError = PackageManager.INSTALL_PARSE_FAILED_MANIFEST_MALFORMED;
                     return null;
                 }
+
                 XmlUtils.skipCurrentTag(parser);
 
             } else if (tagName.equals(TAG_KEY_SETS)) {
diff --git a/libs/androidfw/AssetManager.cpp b/libs/androidfw/AssetManager.cpp
index f50cff4..1ebdc65 100644
--- a/libs/androidfw/AssetManager.cpp
+++ b/libs/androidfw/AssetManager.cpp
@@ -296,22 +296,31 @@ bool AssetManager::createIdmap(const char* targetApkPath, const char* overlayApk
 {
     AutoMutex _l(mLock);
     const String8 paths[2] = { String8(targetApkPath), String8(overlayApkPath) };
-    ResTable tables[2];
-
-    for (int i = 0; i < 2; ++i) {
-        asset_path ap;
-        ap.type = kFileTypeRegular;
-        ap.path = paths[i];
-        Asset* ass = openNonAssetInPathLocked("resources.arsc", Asset::ACCESS_BUFFER, ap);
-        if (ass == NULL) {
-            ALOGW("failed to find resources.arsc in %s\n", ap.path.string());
-            return false;
+    Asset* assets[2] = {NULL, NULL};
+    bool ret = false;
+    {
+        ResTable tables[2];
+
+        for (int i = 0; i < 2; ++i) {
+            asset_path ap;
+            ap.type = kFileTypeRegular;
+            ap.path = paths[i];
+            assets[i] = openNonAssetInPathLocked("resources.arsc",
+                    Asset::ACCESS_BUFFER, ap);
+            if (assets[i] == NULL) {
+                ALOGW("failed to find resources.arsc in %s\n", ap.path.string());
+                goto exit;
+            }
+            tables[i].add(assets[i]);
         }
-        tables[i].add(ass);
+        ret = tables[0].createIdmap(tables[1], targetCrc, overlayCrc,
+                targetApkPath, overlayApkPath, (void**)outData, outSize) == NO_ERROR;
     }
 
-    return tables[0].createIdmap(tables[1], targetCrc, overlayCrc,
-            targetApkPath, overlayApkPath, (void**)outData, outSize) == NO_ERROR;
+exit:
+    delete assets[0];
+    delete assets[1];
+    return ret;
 }
 
 bool AssetManager::addDefaultAssets()
diff --git a/services/core/java/com/android/server/pm/Installer.java b/services/core/java/com/android/server/pm/Installer.java
index 7b85a4f..9cea3b2 100644
--- a/services/core/java/com/android/server/pm/Installer.java
+++ b/services/core/java/com/android/server/pm/Installer.java
@@ -129,7 +129,12 @@ public final class Installer extends SystemService {
             return Long.parseLong(res[1]);
         } catch (ArrayIndexOutOfBoundsException | NumberFormatException e) {
             throw new InstallerException("Invalid inode result: " + Arrays.toString(res));
-        }
+
+    public int removeIdmap(String overlayApkPath) {
+        StringBuilder builder = new StringBuilder("rmidmap");
+        builder.append(' ');
+        builder.append(overlayApkPath);
+        return mInstaller.execute(builder.toString());
     }
 
     public void dexopt(String apkPath, int uid, String instructionSet, int dexoptNeeded,
diff --git a/services/core/java/com/android/server/pm/PackageManagerService.java b/services/core/java/com/android/server/pm/PackageManagerService.java
index 4cbe644..6811428 100755
--- a/services/core/java/com/android/server/pm/PackageManagerService.java
+++ b/services/core/java/com/android/server/pm/PackageManagerService.java
@@ -6723,9 +6723,10 @@ public class PackageManagerService extends IPackageManager.Stub {
 
     private boolean createIdmapForPackagePairLI(PackageParser.Package pkg,
             PackageParser.Package opkg) {
-        if (!opkg.mTrustedOverlay) {
+        if (!opkg.mTrustedOverlay && compareSignatures(pkg.mSignatures, opkg.mSignatures) !=
+                PackageManager.SIGNATURE_MATCH) {
             Slog.w(TAG, "Skipping target and overlay pair " + pkg.baseCodePath + " and " +
-                    opkg.baseCodePath + ": overlay not trusted");
+                    opkg.baseCodePath + ": signatures do not match");
             return false;
         }
         ArrayMap<String, PackageParser.Package> overlaySet = mOverlays.get(pkg.packageName);
@@ -6747,7 +6748,26 @@ public class PackageManagerService extends IPackageManager.Stub {
             overlaySet.values().toArray(new PackageParser.Package[0]);
         Comparator<PackageParser.Package> cmp = new Comparator<PackageParser.Package>() {
             public int compare(PackageParser.Package p1, PackageParser.Package p2) {
-                return p1.mOverlayPriority - p2.mOverlayPriority;
+                if (!p1.mTrustedOverlay && !p2.mTrustedOverlay) {
+                    PackageSetting ps1;
+                    PackageSetting ps2;
+                    synchronized (mPackages) {
+                        ps1 = mSettings.peekPackageLPr(p1.packageName);
+                        if (ps1 == null) {
+                            return 0;
+                        }
+                        ps2 = mSettings.peekPackageLPr(p2.packageName);
+                        if (ps2 == null) {
+                            return 0;
+                        }
+                    }
+                    long diff = ps1.lastUpdateTime - ps2.lastUpdateTime;
+                    return diff == 0 ? 0 : (diff < 0 ? -1 : 1); // long to int, no loss of precision
+                }
+                if (p1.mTrustedOverlay && p2.mTrustedOverlay) {
+                    return p1.mOverlayPriority - p2.mOverlayPriority;
+                }
+                return p1.mTrustedOverlay ? -1 : 1;
             }
         };
         Arrays.sort(overlayArray, cmp);
@@ -7106,6 +7126,7 @@ public class PackageManagerService extends IPackageManager.Stub {
                     synchronized (mPackages) {
                         // Just remove the loaded entries from package lists.
                         mPackages.remove(ps.name);
+                        removeFromOverlaysLP(ps.pkg);
                     }
 
                     logCriticalInfo(Log.WARN, "Package " + ps.name + " at " + scanFile
@@ -9076,6 +9097,11 @@ public class PackageManagerService extends IPackageManager.Stub {
                         createIdmapFailed = true;
                     }
                 }
+                PackageParser.Package targetPkg = mPackages.get(pkg.mOverlayTarget);
+                if (targetPkg != null) {
+                    killApplication(pkg.mOverlayTarget, targetPkg.applicationInfo.uid,
+                            "overlay package installed");
+                }
             } else if (mOverlays.containsKey(pkg.packageName) &&
                     !pkg.packageName.equals("android")) {
                 // This is a regular package, with one or more known overlay packages.
@@ -9908,6 +9934,8 @@ public class PackageManagerService extends IPackageManager.Stub {
         if (r != null) {
             if (DEBUG_REMOVE) Log.d(TAG, "  Libraries: " + r);
         }
+
+        removeFromOverlaysLP(pkg);
     }
 
     private static boolean hasPermission(PackageParser.Package pkgInfo, String perm) {
@@ -20720,6 +20748,46 @@ Slog.v(TAG, ":: stepped forward, applying functor at tag " + parser.getName());
         }
     }
 
+    private void removeFromOverlaysLP(PackageParser.Package pkg) {
+        if (pkg == null) {
+            return;
+        }
+        if (pkg.mOverlayTarget == null) {
+            // regular package
+            ArrayMap<String, PackageParser.Package> map = mOverlays.get(pkg.mOverlayTarget);
+            int N = map.size();
+            for (int i = 0; i < N; i++) {
+                PackageParser.Package opkg = map.valueAt(i);
+                mInstaller.removeIdmap(opkg.baseCodePath);
+            }
+            mOverlays.remove(pkg.packageName);
+        } else {
+            // overlay package
+            PackageParser.Package target = mPackages.get(pkg.mOverlayTarget);
+            if (target != null && target.applicationInfo.resourceDirs != null) {
+                killApplication(pkg.mOverlayTarget, target.applicationInfo.uid,
+                        "overlay package removed");
+                int N = target.applicationInfo.resourceDirs.length;
+                int i = 0;
+                for (; i < N; i++) {
+                    if (target.applicationInfo.resourceDirs[i].equals(pkg.applicationInfo.sourceDir)) {
+                        break;
+                    }
+                }
+                System.arraycopy(target.applicationInfo.resourceDirs, i + 1,
+                        target.applicationInfo.resourceDirs, i, N - 1 - i);
+                String[] tmp = Arrays.copyOfRange(target.applicationInfo.resourceDirs, 0, N - 1);
+                target.applicationInfo.resourceDirs = tmp;
+            }
+
+            mInstaller.removeIdmap(pkg.baseCodePath);
+
+            for (ArrayMap<String, PackageParser.Package> map : mOverlays.values()) {
+                map.remove(pkg.packageName);
+            }
+        }
+    }
+
     private static class MoveCallbacks extends Handler {
         private static final int MSG_CREATED = 1;
         private static final int MSG_STATUS_CHANGED = 2;
-- 
2.10.1

