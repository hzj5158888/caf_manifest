From 4b0830411e694ea090e7b1f430e6d465578046c3 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?M=C3=A5rten=20Kongstad?= <marten.kongstad@sonymobile.com>
Date: Tue, 15 Dec 2015 15:56:40 +0100
Subject: [PATCH 04/31] OMS-N: Add ResTable::remove(cookie) [4/14]

Implement ResTable::remove(cookie). Expose the new functionality via
AssetManager and JNI.

Asset removal is required when dynamically switching the set of loaded
overlay assets, which in turn is part of use-cases such as app themes.

Bug: 31052947

AOSP Change-Id: I9f824bb4948e63d634bc4a0fe83f09eea7540b5b

Change-Id: Idf10736a4823b10cda1e65c5feab96c319757b3e
---
 core/java/android/content/res/AssetManager.java | 16 ++++++
 core/jni/android_util_AssetManager.cpp          | 12 ++++
 include/androidfw/AssetManager.h                |  7 +++
 include/androidfw/ResourceTypes.h               |  2 +
 libs/androidfw/AssetManager.cpp                 | 20 +++++++
 libs/androidfw/ResourceTypes.cpp                | 76 +++++++++++++++++++++++++
 libs/androidfw/tests/Idmap_test.cpp             |  7 ++-
 7 files changed, 139 insertions(+), 1 deletion(-)

diff --git a/core/java/android/content/res/AssetManager.java b/core/java/android/content/res/AssetManager.java
index 7ef5cfe..6f18707 100644
--- a/core/java/android/content/res/AssetManager.java
+++ b/core/java/android/content/res/AssetManager.java
@@ -667,6 +667,22 @@ public final class AssetManager implements AutoCloseable {
 
     private native final int addAssetPathNative(String path, boolean appAsLib);
 
+    /**
+     * {@hide}
+     */
+    public final boolean removeAsset(int cookie) {
+        synchronized (this) {
+            boolean res = removeAssetNative(cookie);
+            makeStringBlocks(mStringBlocks);
+            return res;
+        }
+    }
+
+    /**
+     * {@hide}
+     */
+    public native final boolean removeAssetNative(int cookie);
+
      /**
      * Add a set of assets to overlay an already added set of assets.
      *
diff --git a/core/jni/android_util_AssetManager.cpp b/core/jni/android_util_AssetManager.cpp
index 1840b81..97fbeb9 100644
--- a/core/jni/android_util_AssetManager.cpp
+++ b/core/jni/android_util_AssetManager.cpp
@@ -571,6 +571,16 @@ static jint android_content_AssetManager_addOverlayPath(JNIEnv* env, jobject cla
     return (res) ? (jint)cookie : 0;
 }
 
+static jboolean android_content_AssetManager_removeAsset(JNIEnv* env, jobject clazz,
+                                                         jint cookie)
+{
+    AssetManager* am = assetManagerForJavaObject(env, clazz);
+    if (am == NULL) {
+        return 0;
+    }
+    return am->removeAsset(static_cast<int32_t>(cookie));
+}
+
 static jboolean android_content_AssetManager_isUpToDate(JNIEnv* env, jobject clazz)
 {
     AssetManager* am = assetManagerForJavaObject(env, clazz);
@@ -2187,6 +2197,8 @@ static const JNINativeMethod gAssetManagerMethods[] = {
         (void*) android_content_AssetManager_addAssetPath },
     { "addOverlayPathNative",   "(Ljava/lang/String;)I",
         (void*) android_content_AssetManager_addOverlayPath },
+    { "removeAssetNative",   "(I)Z",
+        (void*) android_content_AssetManager_removeAsset },
     { "isUpToDate",     "()Z",
         (void*) android_content_AssetManager_isUpToDate },
 
diff --git a/include/androidfw/AssetManager.h b/include/androidfw/AssetManager.h
index 116e28a..d41da3b 100644
--- a/include/androidfw/AssetManager.h
+++ b/include/androidfw/AssetManager.h
@@ -130,6 +130,8 @@ public:
      */
     String8 getAssetPath(const int32_t cookie) const;
 
+    bool removeAsset(const int32_t cookie);
+
     /*
      * Set the current locale and vendor.  The locale can change during
      * the lifetime of an AssetManager if the user updates the device's
@@ -398,6 +400,11 @@ private:
                 return mAssetPaths.itemAt(index);
             }
 
+            inline ssize_t removeAt(size_t index)
+            {
+                return mAssetPaths.removeAt(index);
+            }
+
             ssize_t add(const asset_path& ap, int32_t *cookie);
             int32_t nextCookie(const int32_t cookie) const;
             ssize_t cookieToIndex(const int32_t cookie) const;
diff --git a/include/androidfw/ResourceTypes.h b/include/androidfw/ResourceTypes.h
index 50c2344..72cea2e 100644
--- a/include/androidfw/ResourceTypes.h
+++ b/include/androidfw/ResourceTypes.h
@@ -1582,6 +1582,8 @@ public:
     status_t add(ResTable* src, bool isSystemAsset=false);
     status_t addEmpty(const int32_t cookie=-1);
 
+    status_t remove(const int32_t cookie);
+
     status_t getError() const;
 
     void uninit();
diff --git a/libs/androidfw/AssetManager.cpp b/libs/androidfw/AssetManager.cpp
index 556647e..b57927d 100644
--- a/libs/androidfw/AssetManager.cpp
+++ b/libs/androidfw/AssetManager.cpp
@@ -347,6 +347,26 @@ String8 AssetManager::getAssetPath(const int32_t cookie) const
     return mAssetPaths.itemAt(index).path;
 }
 
+bool AssetManager::removeAsset(const int32_t cookie)
+{
+    ResTable* res = mResources;
+    if (!res) {
+        return false;
+    }
+
+    AutoMutex _l(mLock);
+
+    const ssize_t index = mAssetPaths.cookieToIndex(cookie);
+    if (index < 0) {
+        return false;
+    }
+    if (res->remove(cookie) != NO_ERROR) {
+        return false;
+    }
+    mAssetPaths.removeAt(index);
+    return true;
+}
+
 /*
  * Set the current locale.  Use NULL to indicate no locale.
  *
diff --git a/libs/androidfw/ResourceTypes.cpp b/libs/androidfw/ResourceTypes.cpp
index c8c2da9..207b842 100644
--- a/libs/androidfw/ResourceTypes.cpp
+++ b/libs/androidfw/ResourceTypes.cpp
@@ -3904,6 +3904,82 @@ status_t ResTable::addInternal(const void* data, size_t dataSize, const void* id
     return mError;
 }
 
+status_t ResTable::remove(const int32_t cookie)
+{
+    if (mError != NO_ERROR) {
+        return mError;
+    }
+
+    AutoMutex lock(mLock);
+
+    // remove references to header
+    const ssize_t index = cookieToHeaderIndex(cookie);
+    if (index < 0) {
+        return BAD_VALUE;
+    }
+    Header* header = mHeaders.itemAt(index);
+    if (header == NULL) {
+        return BAD_VALUE;
+    }
+    mHeaders.removeAt(index);
+    if (header->owner == this && header->ownedData) {
+        free(header->ownedData);
+    }
+
+    // fix Header::index invariant (if we've removed a header in the middle of the vector)
+    const size_t N = mHeaders.size();
+    for (size_t i = 0; i < N; i++) {
+        mHeaders[i]->index = i;
+    }
+
+    // remove references to packages and types associated with header
+    const size_t Ng = mPackageGroups.size();
+    for (size_t i = 0; i < Ng; i++) {
+        PackageGroup* pg = mPackageGroups.itemAt(i);
+        const size_t N = pg->packages.size();
+        for (size_t j = 0; j < N; j++) {
+            Package *p = pg->packages.itemAt(j);
+            if (p->header == header) {
+                pg->packages.removeAt(j);
+                delete p;
+                break;
+            }
+        }
+
+        const size_t Nt = pg->types.size();
+        for (size_t j = 0; j < Nt; j++) {
+            TypeList& tl = pg->types.editItemAt(j);
+            const size_t N = tl.size();
+            for (size_t k = 0; k < N; k++) {
+                const Type* const typeSpec = tl[k];
+                if (typeSpec->header == header) {
+                    tl.removeAt(k);
+                    delete typeSpec;
+                    break;
+                }
+            }
+        }
+
+        if (pg->packages.size() == 0) {
+            mPackageGroups.removeAt(i);
+            delete pg;
+
+            // rebuild mPackageMap now that elements in mPackageGroups may have been shifted
+            memset(mPackageMap, 0, sizeof(mPackageMap));
+            const size_t Npg = mPackageGroups.size();
+            for (size_t j = 0; j < Npg; j++) {
+                const PackageGroup *pg = mPackageGroups.itemAt(j);
+                mPackageMap[pg->id] = j + 1;
+            }
+            break;
+        }
+    }
+
+    delete header;
+
+    return mError;
+}
+
 status_t ResTable::getError() const
 {
     return mError;
diff --git a/libs/androidfw/tests/Idmap_test.cpp b/libs/androidfw/tests/Idmap_test.cpp
index f50c178..3b5ba77 100644
--- a/libs/androidfw/tests/Idmap_test.cpp
+++ b/libs/androidfw/tests/Idmap_test.cpp
@@ -69,6 +69,8 @@ TEST_F(IdmapTest, canLoadIdmap) {
 }
 
 TEST_F(IdmapTest, overlayOverridesResourceValue) {
+    const int32_t cookie = 42;
+
     Res_value val;
     ssize_t block = mTargetTable.getResource(base::R::string::test2, &val, false);
     ASSERT_GE(block, 0);
@@ -82,7 +84,7 @@ TEST_F(IdmapTest, overlayOverridesResourceValue) {
     ASSERT_TRUE(targetStr16 != NULL);
     ASSERT_EQ(String16("test2"), String16(targetStr16, strLen));
 
-    ASSERT_EQ(NO_ERROR, mTargetTable.add(overlay_arsc, overlay_arsc_len, mData, mDataSize));
+    ASSERT_EQ(NO_ERROR, mTargetTable.add(overlay_arsc, overlay_arsc_len, mData, mDataSize, cookie));
 
     ssize_t newBlock = mTargetTable.getResource(base::R::string::test2, &val, false);
     ASSERT_GE(newBlock, 0);
@@ -95,6 +97,9 @@ TEST_F(IdmapTest, overlayOverridesResourceValue) {
     targetStr16 = pool->stringAt(val.data, &strLen);
     ASSERT_TRUE(targetStr16 != NULL);
     ASSERT_EQ(String16("test2-overlay"), String16(targetStr16, strLen));
+
+    ASSERT_EQ(NO_ERROR, mTargetTable.remove(cookie));
+    EXPECT_TRUE(IsStringEqual(mTargetTable, base::R::string::test2, "test2"));
 }
 
 TEST_F(IdmapTest, overlaidResourceHasSameName) {
-- 
2.8.2

