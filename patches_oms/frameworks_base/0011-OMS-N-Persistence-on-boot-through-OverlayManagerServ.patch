From 1662e210512b228f34ce3f8567f3b8d581b674fd Mon Sep 17 00:00:00 2001
From: Nicholas Chum <nicholaschum@gmail.com>
Date: Sun, 19 Jun 2016 10:37:13 -0400
Subject: [PATCH 11/31] OMS-N: Persistence on boot through
 OverlayManagerServiceImpl [11/14]

Overlays should not be enforced by the traditional OverlayManagerService
by Sony, but instead, it shouldn't be enforced at all to allow third
party overlays from the community to boot up with the device.

Change-Id: I4fe7a86f33469c9c86b619b1c8cc71e39cad1f4f
---
 .../server/om/OverlayManagerServiceImpl.java       | 31 +++++++++++++++-------
 1 file changed, 21 insertions(+), 10 deletions(-)

diff --git a/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java b/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java
index b86b352..e0e7e3a 100644
--- a/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java
+++ b/services/core/java/com/android/server/om/OverlayManagerServiceImpl.java
@@ -391,34 +391,45 @@ class OverlayManagerServiceImpl {
 
     private int calculateNewState(PackageInfo targetPackage, @NonNull PackageInfo overlayPackage,
             int userId) throws OverlayManagerSettings.BadKeyException {
+
+        // STATE 0 CHECK: Check if the overlay package is disabled by PackageManager
         if (!overlayPackage.applicationInfo.enabled) {
             return STATE_NOT_APPROVED_COMPONENT_DISABLED;
         }
 
+        // OVERLAY STATE CHECK: Check the current overlay's activation
+        boolean stateCheck = mSettings.getEnabled(overlayPackage.packageName, userId);
+
+        // STATE 1 CHECK: Check if the overlay's target package is missing from the device
         if (targetPackage == null) {
             return STATE_NOT_APPROVED_MISSING_TARGET;
         }
 
+        // STATE 2 CHECK: Check if the overlay has an existing idmap file created. Perhaps
+        // there were no matching resources between the two packages? (Overlay & Target)
         if (!mIdmapManager.idmapExists(overlayPackage, userId)) {
             return STATE_NOT_APPROVED_NO_IDMAP;
         }
 
-        boolean enableIfApproved = mSettings.getEnabled(overlayPackage.packageName, userId);
-
-        if (mPackageManager.signaturesMatching(targetPackage.packageName,
-                    overlayPackage.packageName, userId)) {
-            return enableIfApproved ? STATE_APPROVED_ENABLED : STATE_APPROVED_DISABLED;
-        }
-
+        // STATE 6 CHECK: System Overlays, also known as RRO overlay files, work the same
+        // as OMS, but with enable/disable limitations. A system overlay resides in the
+        // directory "/vendor/overlay" depending on your device.
+        //
+        // Team Substratum: Disable this as this is a security vulnerability and a
+        // memory-limited partition.
         if ((overlayPackage.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
-            return enableIfApproved ? STATE_APPROVED_ENABLED : STATE_APPROVED_DISABLED;
+            return STATE_NOT_APPROVED_COMPONENT_DISABLED;
         }
 
+        // STATE 3 CHECK: If the overlay only modifies resources explicitly granted by the
+        // target, we approve it.
+        //
+        // Team Substratum: Always approve dangerous packages but disabled state
         if (!mIdmapManager.isDangerous(overlayPackage, userId)) {
-            return enableIfApproved ? STATE_APPROVED_ENABLED : STATE_APPROVED_DISABLED;
+            return STATE_APPROVED_DISABLED;
         }
 
-        return STATE_NOT_APPROVED_DANGEROUS_OVERLAY;
+        return stateCheck ? STATE_APPROVED_ENABLED : STATE_APPROVED_DISABLED;
     }
 
     private void removeIdmapIfPossible(OverlayInfo oi) {
-- 
2.10.0

