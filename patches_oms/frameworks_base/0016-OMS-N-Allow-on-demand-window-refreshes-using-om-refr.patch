From 706717a1c40263007c300913d3f172673f9908c7 Mon Sep 17 00:00:00 2001
From: Jacob McSwain <jacob.a.mcswain@gmail.com>
Date: Wed, 31 Aug 2016 05:11:27 +0000
Subject: [PATCH 16/31] OMS-N: Allow on-demand window refreshes using "om
 refresh"

This commit allows Substratum to call "om refresh" to trigger window
refreshes on demand.

Change-Id: I9f82bc032f7bafd5421fcca1169a78b9117a297b
---
 cmds/om/src/com/android/commands/om/Om.java | 35 +++++++++++++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/cmds/om/src/com/android/commands/om/Om.java b/cmds/om/src/com/android/commands/om/Om.java
index 2cfc9a5..7cdc7d0 100644
--- a/cmds/om/src/com/android/commands/om/Om.java
+++ b/cmds/om/src/com/android/commands/om/Om.java
@@ -68,6 +68,8 @@ public final class Om {
             return runDisableAll();
         } else if ("set-priority".equals(op)) {
             return runSetPriority();
+        } else if ("refresh".equals(op)) {
+            return runRefresh();
         } else if (op != null) {
             System.err.println("Error: unknown command '" + op + "'");
         }
@@ -322,6 +324,36 @@ public final class Om {
         return 0;
     }
 
+    private int runRefresh() {
+        int userId = UserHandle.USER_OWNER;
+        int ret = 1;
+        try {
+            String opt;
+            while ((opt = nextOption()) != null) {
+                switch (opt) {
+                    case "--user":
+                        String optionData = nextOptionData();
+                        if (optionData == null || !isNumber(optionData)) {
+                            System.err.println("Error: no USER_ID specified");
+                            showUsage();
+                            return 1;
+                        }
+                        userId = Integer.parseInt(optionData);
+                        break;
+                    default:
+                        System.err.println("Error: Unknown option: " + opt);
+                        return 1;
+                }
+            }
+            mOm.refresh(userId);
+            ret=0;
+        } catch(Exception x) {
+            x.printStackTrace();
+            ret=1;
+        }
+        return ret;
+    }
+
     private String nextOption() {
         if (mNextArg >= mArgs.length) {
             return null;
@@ -382,6 +414,7 @@ public final class Om {
         System.err.println("       om enable [--user USER_ID] PACKAGE");
         System.err.println("       om disable [--user USER_ID] PACKAGE");
         System.err.println("       om disable-all [--user USER_ID]");
+        System.err.println("       om refresh [--user USER_ID]");
         System.err.println("       om set-priority [--user USER_ID] PACKAGE PARENT|lowest|highest");
         System.err.println("");
         System.err.println("om list: print all overlay packages in priority order;");
@@ -394,6 +427,8 @@ public final class Om {
         System.err.println("om disable PACKAGE: disable overlay package PACKAGE");
         System.err.println("om disable-all: disables all overlay packages");
         System.err.println("");
+        System.err.println("om refresh: refreshes all overlay packages");
+        System.err.println("");
         System.err.println("om set-priority PACKAGE PARENT: change the priority of the overlay");
         System.err.println("         PACKAGE to be just higher than the priority of PACKAGE_PARENT");
         System.err.println("         If PARENT is the special keyword 'lowest', change priority of");
-- 
2.10.0

